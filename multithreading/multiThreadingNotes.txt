Executing several tasks simultaneously where each task is a separate independent part
of the same program, is called Thread based multitasking.
And each independent part is called a "Thread". 

We can define a Thread in the following 2 ways.
1. By extending Thread class.
2. By implementing Runnable interface.

If multiple Threads are waiting to execute then which Thread will execute 1st is
decided by "Thread Scheduler" which is part of JVM.
 Which algorithm or behavior followed by Thread Scheduler we can't expect
exactly it is the JVM vendor dependent hence in multithreading examples we
can't expect exact execution order and exact output.

start() vs run()
-----------------
In the case of t.start() a new Thread will be created which is responsible for the
execution of run() method.
 But in the case of t.run() no new Thread will be created and run() method will be
executed just like a normal method by the main Thread.

start() method
--------------
For every Thread the required mandatory activities like registering the Thread with
Thread Scheduler will takes care by Thread class start() method and programmer is
responsible just to define the job of the Thread inside run() method.
That is start() method acts as best assistant to the programmer.
Example:
start()
{
1. Register Thread with Thread Scheduler
2. All other mandatory low level activities.
3. Invoke or calling run() method.
}
We can conclude that without executing Thread class start() method there is no chance
of starting a new Thread in java. Due to this start() is considered as heart of
multithreading

---------------------------
override run() method?
It is highly recommended to override run() method. Otherwise don't go for
multithreading concept. 

-------------------------------
overload run() method?
We can overload run() method but Thread class start() method always invokes no
argument run() method the other overload run() methods we have to call explicitly then
only it will be executed just like normal method. 
----------------------------------
override start() method?
: It is never recommended to override start() method. 
------------------

1. extending thread class
Mythread -> Thread -> Runnable

2. implementing runnable interface
MyRunnable -> Runnable 


We can define a Thread even by implementing Runnable interface also.
Runnable interface present in java.lang.pkg and contains only one method run().

Best approach to define a Thread:
 Among the 2 ways of defining a Thread, implements Runnable approach is
always recommended.
 In the 1st approach our class should always extends Thread class there is no
chance of extending any other class hence we are missing the benefits of
inheritance.
 But in the 2nd approach while implementing Runnable interface we can extend
some other class also. Hence implements Runnable mechanism is recommended
to define a Thread.

------------
Getting and setting name of a Thread:
 Every Thread in java has some name it may be provided explicitly by the
programmer or automatically generated by JVM.
 Thread class defines the following methods to get and set name of a Thread.
Methods:
1. public final String getName()
2. public final void setName(String name)
-------------------

THREAD LIFE CYCLE
MyThread t = new MyThread();

thread object created -> new state
t.start()             -> ready/runnable state
if thread scheduler allocated -> running state
once run() completed -> dead state 

case: restart the thread again
After starting a Thread we are not allowed to restart the same Thread once again 
otherwise we will get runtime exception saying "IllegalThreadStateException". 

Thread Priorities 
-----------------
 Every Thread in java has some priority it may be default priority generated by 
JVM (or) explicitly provided by the programmer. 

 
 The valid range of Thread priorities is 1 to 10[but not 0 to 10] where 1 is the least 
priority and 10 is highest priority. 
 Thread class defines the following constants to represent some standard 
priorities.  
1. Thread. MIN_PRIORITY----------1 
2. Thread. MAX_PRIORITY----------10 
3. Thread. NORM_PRIORITY--------5 
 There are no constants like Thread.LOW_PRIORITY, 
Thread.HIGH_PRIORITY 
 Thread scheduler uses these priorities while allocating CPU. 
 The Thread which is having highest priority will get chance for 1st execution. 
 If 2 Threads having the same priority then we can't expect exact execution order 
it depends on Thread scheduler whose behavior is vendor dependent. 
 We can get and set the priority of a Thread by using the following methods.  
1. public final int getPriority() 
2. public final void setPriority(int newPriority);//the allowed values are 1 to 
10 
 The allowed values are 1 to 10 otherwise we will get runtime exception saying 
"IllegalArgumentException". 
Default priority: 
The default priority only for the main Thread is 5. But for all the remaining Threads 
the default priority will be inheriting from parent to child. That is whatever the priority 
parent has by default the same priority will be for the child also. 

The Methods to Prevent a Thread from Execution: 
-------------------------------------------------
 
We can prevent(stop) a Thread execution by using the following methods.  
1. yield(); 
2. join(); 
3. sleep(); 
yield(): 
----------
1. yield() method causes "to pause current executing Thread for giving the chance 
of remaining waiting Threads of same priority".

CASE 1
OTHER WAITING  THREAD - LOW PRIORITY   -> CURRENT THREAD CONTINUES ITS EXECUTION
NO WAITING THREAD  ->CURRENT THREAD CONTINUES ITS EXECUTION

CASE 2:
OTHER WAITING THREADS - SAME PRIORITY    ->WE CAN'T EXPECT WHICH THREAD WILL GET CHANCE 


current thread goes back to running state, based on the thread scheduler 



2.Join(): 
----------
If a Thread wants to wait until completing some other Thread then we should go for 
join() method.  
Example: If a Thread t1 executes t2.join() then t1 should go for waiting state until 
completing t2. 

Every join() method throws InterruptedException, which is checked exception hence 
compulsory we should handle either by try catch or by throws keyword. 
Otherwise we will get compiletime error. 

t1,t2 

t1 -> t2.join()


DEADLOCK SCENARIO: https://github.com/ragaPriya224/Dru24Batch1/blob/master/multithreading/DeadLock.mp4
Note : 
If main thread calls join() on child thread object and child thread called join() on main 
thread object then both threads will wait for each other forever and the program will be 
hanged(like deadlock if a Thread class join() method on the same thread itself then the 
program will be hanged ).  
Example : 
 
class ThreadDemo { 
public static void main() throws InterruptedException { 
Thread.currentThread().join(); 
      ---------------   -------- 
        main              main 
} 
 
}


Sleep() method: 
----------------
If a Thread don't want to perform any operation for a particular amount of time then 
we should go for sleep() method. 

Interrupting a Thread: 
 
How a Thread can interrupt another thread ?  
If a Thread can interrupt a sleeping or waiting Thread by using interrupt()(break off) 
method of Thread class.  
public void interrupt(); 

if interrupt() - on waiting/sleeping thread - it will be interrupted immediately
if interrupt() - on a normal thread - it will wait, until the thread enters waiting/sleeping state 
				      once thread enters waiting/sleeping state , then it will be interrupted immediately
				      thread never enters waiting/sleeping state, interrupt() call is wasted :( 
