Executing several tasks simultaneously where each task is a separate independent part
of the same program, is called Thread based multitasking.
And each independent part is called a "Thread". 

We can define a Thread in the following 2 ways.
1. By extending Thread class.
2. By implementing Runnable interface.

If multiple Threads are waiting to execute then which Thread will execute 1st is
decided by "Thread Scheduler" which is part of JVM.
 Which algorithm or behavior followed by Thread Scheduler we can't expect
exactly it is the JVM vendor dependent hence in multithreading examples we
can't expect exact execution order and exact output.

start() vs run()
-----------------
In the case of t.start() a new Thread will be created which is responsible for the
execution of run() method.
 But in the case of t.run() no new Thread will be created and run() method will be
executed just like a normal method by the main Thread.

start() method
--------------
For every Thread the required mandatory activities like registering the Thread with
Thread Scheduler will takes care by Thread class start() method and programmer is
responsible just to define the job of the Thread inside run() method.
That is start() method acts as best assistant to the programmer.
Example:
start()
{
1. Register Thread with Thread Scheduler
2. All other mandatory low level activities.
3. Invoke or calling run() method.
}
We can conclude that without executing Thread class start() method there is no chance
of starting a new Thread in java. Due to this start() is considered as heart of
multithreading

---------------------------
override run() method?
It is highly recommended to override run() method. Otherwise don't go for
multithreading concept. 

-------------------------------
overload run() method?
We can overload run() method but Thread class start() method always invokes no
argument run() method the other overload run() methods we have to call explicitly then
only it will be executed just like normal method. 
----------------------------------
override start() method?
: It is never recommended to override start() method. 
------------------

1. extending thread class
Mythread -> Thread -> Runnable

2. implementing runnable interface
MyRunnable -> Runnable 


We can define a Thread even by implementing Runnable interface also.
Runnable interface present in java.lang.pkg and contains only one method run().

Best approach to define a Thread:
 Among the 2 ways of defining a Thread, implements Runnable approach is
always recommended.
 In the 1st approach our class should always extends Thread class there is no
chance of extending any other class hence we are missing the benefits of
inheritance.
 But in the 2nd approach while implementing Runnable interface we can extend
some other class also. Hence implements Runnable mechanism is recommended
to define a Thread.

------------
Getting and setting name of a Thread:
 Every Thread in java has some name it may be provided explicitly by the
programmer or automatically generated by JVM.
 Thread class defines the following methods to get and set name of a Thread.
Methods:
1. public final String getName()
2. public final void setName(String name)

